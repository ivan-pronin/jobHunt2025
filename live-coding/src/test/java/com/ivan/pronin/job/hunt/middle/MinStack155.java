package com.ivan.pronin.job.hunt.middle;

import java.util.Stack;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
 * @author Ivan Pronin
 * @since 09.07.2025
 */
public class MinStack155 {

    /*
     * 155. Min Stack
     * Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
     * * Implement the MinStack class:
     * * MinStack() initializes the stack object.
     * * void push(int val) pushes the element val onto the stack.
     * * void pop() removes the element on the top of the stack.
     * * int top() gets the top element of the stack.
     * * int getMin() retrieves the minimum element in the stack.
     */

    private Stack<Integer> stack;

    private Stack<Integer> minStack;

    /*
     * üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * Time: O(1) ‚Äî –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∑–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ –≤—Ä–µ–º—è.
     * Space: O(n) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–æ–≤.
     * * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤ —ç—Ç–æ–º —Ä–µ—à–µ–Ω–∏–∏ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º—É–º –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ —Å—Ç–µ–∫–∞.
     * * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞—Ç—å –º–∏–Ω–∏–º—É–º, –Ω–µ –ø–µ—Ä–µ–±–∏—Ä–∞—è –≤–µ—Å—å —Å—Ç–µ–∫.
     * * * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–∏–Ω–∏–º—É–º, –æ–±–Ω–æ–≤–ª—è—è –µ–≥–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º push/pop.
     * * * –ù–æ —ç—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–¥–µ—Ç—Å—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞.
     *
     */
    public MinStack155() {
        stack = new Stack<>();
        minStack = new Stack<>();
    }

    public void push(int val) {
        stack.push(val);
        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º—É–º –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
        if (minStack.isEmpty() || val <= minStack.peek()) {
            minStack.push(val);
        } else {
            minStack.push(minStack.peek());
        }
    }

    public void pop() {
        stack.pop();
        minStack.pop();
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return minStack.peek();
    }

    @BeforeEach
    void setUp() {
        stack = new Stack<>();
        minStack = new Stack<>();
    }

    @Test
    void testMinStackOperations() {
        push(-2);
        push(0);
        push(-3);
        assertEquals(-3, getMin());

        pop();
        assertEquals(0, top());
        assertEquals(-2, getMin());
    }

    @Test
    void testSingleElement() {
        push(42);
        assertEquals(42, top());
        assertEquals(42, getMin());

        pop();
        assertThrows(Exception.class, this::top);     // —Å—Ç–µ–∫ –ø—É—Å—Ç
        assertThrows(Exception.class, this::getMin);  // —Å—Ç–µ–∫ –ø—É—Å—Ç
    }

    @Test
    void testIncreasingValues() {
        push(1);
        push(2);
        push(3);
        assertEquals(1, getMin());
    }

    @Test
    void testDecreasingValues() {
        push(3);
        push(2);
        push(1);
        assertEquals(1, getMin());

        pop();
        assertEquals(2, getMin());
    }

}
