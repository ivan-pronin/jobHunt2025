package com.ivan.pronin.job.hunt.senior;

import java.util.ArrayList;
import java.util.List;

import com.ivan.pronin.job.hunt.senior.model.ListNode;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

/**
 * @author Ivan Pronin
 * @since 10.07.2025
 */
public class ReverseLinkedList209 {

    /*
     * 209. Reverse Linked List
     * Reverse a singly linked list.
     * Example:
     * Input: head = [1,2,3,4,5]
     * Output: [5,4,3,2,1]
     *
     * üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * Time: O(n) ‚Äî –∫–∞–∂–¥—ã–π —É–∑–µ–ª –ø–æ—Å–µ—â–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑.
     * Space: O(1) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π, –Ω–µ —Ç—Ä–µ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏.
     */
    public static ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;

        while (curr != null) {
            ListNode next = curr.next; // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ
            curr.next = prev;          // –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É
            prev = curr;               // –¥–≤–∏–Ω—É—Ç—å prev
            curr = next;               // –¥–≤–∏–Ω—É—Ç—å curr
        }

        return prev;
    }

    public static ListNode reverseListRecursive(ListNode head) {
        //  1 -> 5 -> 10 -> null
        // –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –≥–æ–ª–æ–≤–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ –æ–¥–∏–Ω —É–∑–µ–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ–ª–æ–≤—É
        if (head == null || head.next == null) {
            return head;
        }
        // —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Å–ø–∏—Å–∫–∞
        ListNode newHead = reverseListRecursive(head.next);
        // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –∫–∞–∫ —Å–ª–µ–¥—É—é—â–∏–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞
        head.next.next = head;
        // –æ–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
        head.next = null;
        return newHead; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π "–≥–æ–ª–æ–≤—É" —Å–ø–∏—Å–∫–∞
    }

    private ListNode buildList(int... vals) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        for (int val : vals) {
            curr.next = new ListNode(val);
            curr = curr.next;
        }
        return dummy.next;
    }

    private int[] toArray(ListNode head) {
        List<Integer> res = new ArrayList<>();
        while (head != null) {
            res.add(head.val);
            head = head.next;
        }
        return res.stream().mapToInt(i -> i).toArray();
    }

    @Test
    public void testIterative() {
        assertArrayEquals(new int[]{5, 4, 3, 2, 1}, toArray(reverseList(buildList(1, 2, 3, 4, 5))));
        assertArrayEquals(new int[]{}, toArray(reverseList(buildList())));
        assertArrayEquals(new int[]{1}, toArray(reverseList(buildList(1))));
    }

    @Test
    public void testRecursive() {
        assertArrayEquals(new int[]{5, 4, 3, 2, 1}, toArray(reverseListRecursive(buildList(1, 2, 3, 4, 5))));
        assertArrayEquals(new int[]{}, toArray(reverseListRecursive(buildList())));
        assertArrayEquals(new int[]{1}, toArray(reverseListRecursive(buildList(1))));
    }

}
