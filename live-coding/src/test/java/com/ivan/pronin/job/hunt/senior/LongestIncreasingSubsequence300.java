package com.ivan.pronin.job.hunt.senior;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @author Ivan Pronin
 * @since 11.07.2025
 */
public class LongestIncreasingSubsequence300 {

    /*
     * 300. Longest Increasing Subsequence
     * Given an integer array nums, return the length of the longest strictly increasing subsequence.
     * Example 1:
     * Input: nums = [10,9,2,5,3,7,101,18]
     * Output: 4
     * Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
     *
     * üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * Time: O(n^2) ‚Äî –≥–¥–µ n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏.
     * Space: O(n) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ dp –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª–∏–Ω—ã –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
     *
     */
    public int lengthOfLIS(int[] nums) {
        if (nums.length == 0) return 0;
        int[] dp = new int[nums.length];
        Arrays.fill(dp, 1);

        int max = 1;
        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            max = Math.max(max, dp[i]);
        }
        return max;
    }

    /*
     * –†–µ—à–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤–æ–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
     * üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * Time: O(n log n) ‚Äî –≥–¥–µ n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–æ–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
     * Space: O(n) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ tails –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ü–æ–≤ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏—Ö –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π.
     * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ, —á–µ–º O(n^2), –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤.
     * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∑–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º tails –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ü–æ–≤ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏—Ö –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π.
     * –ï—Å–ª–∏ –º—ã –º–æ–∂–µ–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ç–æ –º—ã –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–µ—Ü —ç—Ç–æ–π –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
     * –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ –≤—Å–µ—Ö –∫–æ–Ω—Ü–æ–≤, —Ç–æ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –Ω–æ–≤—ã–π –∫–æ–Ω–µ—Ü.
     * –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –∫–∞–∫–æ–º—É-—Ç–æ –∫–æ–Ω—Ü—É, —Ç–æ –º—ã –∑–∞–º–µ–Ω—è–µ–º —ç—Ç–æ—Ç –∫–æ–Ω–µ—Ü –Ω–∞ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç.
     * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ü–æ–≤ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏—Ö –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π,
     * —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –¥–ª–∏–Ω—É –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
     */
    public int lengthOfLISBinarySearch(int[] nums) {
        int[] tails = new int[nums.length];
        int size = 0;

        for (int num : nums) {
            int left = 0, right = size;
            while (left < right) {
                int mid = (left + right) / 2;
                if (tails[mid] < num) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            tails[left] = num;
            if (left == size) size++; // <== –≤–æ—Ç —ç—Ç–æ—Ç —Å—á–µ—Ç—á–∏–∫ LIS
        }

        return size;
    }

    public int lengthOfLISCollectionsSort(int[] nums) {
        // tails[i] = the smallest possible tail of an increasing subsequence of length i+1
        List<Integer> tails = new ArrayList<>();

        for (int num : nums) {
            int idx = Collections.binarySearch(tails, num);
            if (idx < 0) idx = -idx - 1; // if not found, binarySearch returns (-(insertion point) - 1)
            if (idx == tails.size()) {
                tails.add(num); // new longer subsequence
            } else {
                tails.set(idx, num); // replace to keep tails optimal
            }
        }

        return tails.size(); // size of tails = length of LIS
    }

    @Test
    public void testLIS_DP() {
        assertEquals(4, lengthOfLIS(new int[]{10, 9, 2, 5, 3, 7, 101, 18}));
        assertEquals(4, lengthOfLISBinarySearch(new int[]{10, 9, 2, 5, 3, 7, 101, 18}));
        assertEquals(4, lengthOfLISCollectionsSort(new int[]{10, 9, 2, 5, 3, 7, 101, 18}));
        assertEquals(1, lengthOfLIS(new int[]{3, 3, 3, 3}));
        assertEquals(6, lengthOfLIS(new int[]{1, 3, 6, 7, 9, 4, 10, 5, 6}));
        assertEquals(6, lengthOfLISBinarySearch(new int[]{1, 3, 6, 7, 9, 4, 10, 5, 6}));
    }

}
