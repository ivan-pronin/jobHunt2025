package com.ivan.pronin.job.hunt.system;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.UUID;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @author Ivan Pronin
 * @since 14.07.2025
 */
public class ConsistentHashingImplementation {

    /*
     * ‚ùì –ü—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é —Ä–µ—à–∞–µ—Ç Consistent Hashing:
     * –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–µ—à–∏, —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π key-value store –∏–ª–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏), –∏ –Ω–∞–º –Ω—É–∂–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "user123", "product42", –∏ —Ç.–ø.) –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤—É —Å–µ—Ä–≤–µ—Ä–æ–≤ / —É–∑–ª–æ–≤.
     * üî¥ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (–Ω–∞–∏–≤–Ω—ã–π):
     * serverIndex = hash(key) % N;  // N ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤
     * –†–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ.
     * –ü—Ä–æ–±–ª–µ–º–∞: –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–º/—É–¥–∞–ª–∏–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä (N –∏–∑–º–µ–Ω–∏—Ç—Å—è) ‚Äî –≤—Å–µ –∫–ª—é—á–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—Å—è!
     * üëâ –≠—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ —Å–µ—Ç–∏, cache miss, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.
     * ‚úÖ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç Consistent Hashing:
     * –¶–µ–ª—å:
     * –û–±–µ—Å–ø–µ—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–π –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–∑–ª–æ–≤.
     * üîÑ –û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è:
     * –•—ç—à–∏—Ä—É–µ–º –∏ –∫–ª—é—á–∏, –∏ —É–∑–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, hash("serverA"), hash("serverB"), hash("key42")) –∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∏—Ö –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–º –∫—Ä—É–≥–µ (ring).
     * –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–ª—é—á–∞:
     * –ò–¥—ë–º –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ, –∏—â–µ–º –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä —Å —Ö—ç—à–µ–º ‚â• —Ö—ç—à–∞ –∫–ª—é—á–∞ (wrap-around, –µ—Å–ª–∏ –Ω–∞–¥–æ).
     * –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:
     * –ó–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ –∫–ª—é—á–∏ (—Ç–µ, —á—Ç–æ ¬´–ø–µ—Ä–µ—Ö–æ–¥—è—Ç¬ª –Ω–∞ –Ω–æ–≤—ã–π/—Å–æ—Å–µ–¥–Ω–∏–π —É–∑–µ–ª).
     */

    /*
     *  üìå –ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:
     * Distributed cache (–Ω–∞–ø—Ä–∏–º–µ—Ä, Memcached, Redis Cluster)
     * Load balancing
     * Distributed hash tables (DHT), P2P-—Å–µ—Ç–∏ (BitTorrent, DynamoDB)
     * Sharded databases
     */

    /*
     * üîπ –ó–∞—á–µ–º –Ω—É–∂–Ω—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —É–∑–ª—ã –≤ Consistent Hashing?
     *
     * üìå –ü—Ä–æ–±–ª–µ–º–∞:
     * –ë–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤, –ø—Ä–∏ –Ω–µ–±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º, –ø–æ—Ç–æ–º—É —á—Ç–æ:
     * hash() –º–æ–∂–µ—Ç "—Å–∫—É—á–∫–æ–≤–∞—Ç—å" —É–∑–ª—ã –≤ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ –∫–æ–ª—å—Ü–∞,
     * –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–ª—é—á–µ–π, –∞ –¥—Ä—É–≥–∏–µ ‚Äî –ø–æ—á—Ç–∏ –Ω–∏—á–µ–≥–æ.
     * ‚ùó –î–∞–∂–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –º–Ω–æ–≥–æ, –Ω–æ –æ–Ω–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ –ø–æ —Ö—ç—à—É, –ø–µ—Ä–µ–∫–æ—Å –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–º–æ–∂–µ–Ω.
     */

    private static class VirtualNodeSolution {
        private final TreeMap<Integer, String> ring = new TreeMap<>();
        private final Map<String, List<Integer>> virtualMap = new HashMap<>();
        private final int VIRTUAL_NODES = 100;

        public void addNode(String node) {
            List<Integer> hashes = new ArrayList<>();
            for (int i = 0; i < VIRTUAL_NODES; i++) {
                int hash = getHash(node + "#" + i);
                ring.put(hash, node);
                hashes.add(hash);
            }
            virtualMap.put(node, hashes);
        }

        public void removeNode(String node) {
            List<Integer> hashes = virtualMap.getOrDefault(node, List.of());
            for (int hash : hashes) {
                ring.remove(hash);
            }
            virtualMap.remove(node);
        }

        public String getNode(String key) {
            if (ring.isEmpty()) return null;
            int hash = getHash(key);
            Map.Entry<Integer, String> entry = ring.ceilingEntry(hash);
            if (entry == null) return ring.firstEntry().getValue();
            return entry.getValue();
        }

        private int getHash(String s) {
            int hash = s.hashCode();
            return Integer.toUnsignedLong(hash) > Integer.MAX_VALUE
                ? hash & Integer.MAX_VALUE
                : hash;
        }

    }

    @Test
    void test(){
        var ch = new VirtualNodeSolution();
        ch.addNode("AAA");
        ch.addNode("BBB");
        ch.addNode("CCC");

        Map<String, Integer> counts = new HashMap<>();
        for (int i = 0; i < 1000; i++) {
            String node = ch.getNode(UUID.randomUUID().toString());
            counts.put(node, counts.getOrDefault(node, 0) + 1);
        }

        System.out.println("With virtual nodes: " + counts);
        assertEquals(3, counts.size());

        ch.removeNode("B");
        System.out.println("After removing B: " + ch.getNode("key1"));

        System.out.println("All tests passed.");
    }

}
