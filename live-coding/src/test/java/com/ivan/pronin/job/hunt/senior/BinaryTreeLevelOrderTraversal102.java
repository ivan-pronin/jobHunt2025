package com.ivan.pronin.job.hunt.senior;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import com.ivan.pronin.job.hunt.middle.model.TreeNode;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @author Ivan Pronin
 * @since 10.07.2025
 */
public class BinaryTreeLevelOrderTraversal102 {

    /*
     * 102. Binary Tree Level Order Traversal
     * Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).
     * Example:
     * Input: root = [3,9,20,null,null,15,7]
     * Output: [[3],[9,20],[15,7]]
     *
     *
     * üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * Time: O(n) ‚Äî –≥–¥–µ n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ, –∫–∞–∂–¥—ã–π —É–∑–µ–ª –ø–æ—Å–µ—â–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑.
     * Space: O(n) ‚Äî –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –¥–µ—Ä–µ–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ, –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ n/2 —É–∑–ª–æ–≤, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ O(n) –ø–∞–º—è—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —É–∑–ª–æ–≤.
     */
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) return result;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            List<Integer> level = new ArrayList<>();

            for (int i = 0; i < levelSize; i++) {
                TreeNode node = queue.poll();
                level.add(node.val);

                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
            }

            result.add(level);
        }

        return result;
    }

    /*
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DFS
     * üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * Time: O(n) ‚Äî –≥–¥–µ n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ, –∫–∞–∂–¥—ã–π —É–∑–µ–ª –ø–æ—Å–µ—â–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑.
     * Space: O(h) ‚Äî –≥–¥–µ h ‚Äî –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è, –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ O(n) –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
     */
    public List<List<Integer>> levelOrderDfsRecursion(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        dfs(root, 0, result);
        return result;
    }

    private void dfs(TreeNode node, int level, List<List<Integer>> result) {
        if (node == null) return;

        if (result.size() <= level) {
            result.add(new ArrayList<>());
        }

        result.get(level).add(node.val);

        dfs(node.left, level + 1, result);
        dfs(node.right, level + 1, result);
    }

    private TreeNode buildTree() {
        //      3
        //     / \
        //    9  20
        //       / \
        //      15  7
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(9);
        root.right = new TreeNode(20);
        root.right.left = new TreeNode(15);
        root.right.right = new TreeNode(7);
        return root;
    }

    @Test
    public void testBFS() {
        List<List<Integer>> expected = Arrays.asList(
            Arrays.asList(3),
            Arrays.asList(9, 20),
            Arrays.asList(15, 7)
        );
        assertEquals(expected, levelOrder(buildTree()));
    }

    @Test
    public void testDFS() {
        List<List<Integer>> expected = Arrays.asList(
            Arrays.asList(3),
            Arrays.asList(9, 20),
            Arrays.asList(15, 7)
        );
        assertEquals(expected, levelOrderDfsRecursion(buildTree()));
    }

}
