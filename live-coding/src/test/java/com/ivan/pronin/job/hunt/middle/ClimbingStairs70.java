package com.ivan.pronin.job.hunt.middle;

import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @author Ivan Pronin
 * @since 09.07.2025
 */
public class ClimbingStairs70 {

    /*
     * 70. Climbing Stairs
     * You are climbing a staircase. It takes n steps to reach the top.
     * Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
     * Example 1:
     * Input: n = 2
     * Output: 2
     * Explanation: There are two ways to climb to the top:
     * 1. 1 step + 1 step
     * 2. 2 steps
     * Example 2:
     * Input: n = 3
     * Output: 3
     * Explanation: There are three ways to climb to the top:
     * 1. 1 step + 1 step + 1 step
     * 2. 1 step + 2 steps
     * 3. 2 steps + 1 step
     */
    private static final Map<Integer, Integer> memo = new HashMap<>();

    /*
     * üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * Time: O(n) ‚Äî –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ–∫—É—Ä—Å–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É —à–∞–≥—É, –∏ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –º–∞–ø–µ.
     * Space: O(n) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –º–∞–ø–µ.
     */
    public static int climbStairs(int n) {
        if (n <= 2) return n;
        if (memo.containsKey(n)) return memo.get(n);

        int result = climbStairs(n - 1) + climbStairs(n - 2);
        memo.put(n, result);
        return result;
    }

    /*
     * –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (Bottom-Up)
     * üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * Time: O(n) ‚Äî –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—É–ø–µ–Ω—è–º –æ—Ç 1 –¥–æ n.
     * Space: O(1) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
     */
    public int climbStairsIterativeBottomUp(int n) {
        if (n <= 2) return n;

        int first = 1;
        int second = 2;

        for (int i = 3; i <= n; i++) {
            int third = first + second;
            first = second;
            second = third;
        }

        return second;
    }

    @Test
    void testBaseCases() {
        assertEquals(1, ClimbingStairs70.climbStairs(1));
        assertEquals(2, ClimbingStairs70.climbStairs(2));
    }

    @Test
    void testSmallInputs() {
        assertEquals(3, ClimbingStairs70.climbStairs(3));
        assertEquals(5, ClimbingStairs70.climbStairs(4));
        assertEquals(8, ClimbingStairs70.climbStairs(5));
    }

    @Test
    void testLargerInput() {
        assertEquals(1836311903, ClimbingStairs70.climbStairs(45)); // –≤–ª–µ–∑–∞–µ—Ç –≤ int
    }

    @Test
    void testEdgeInput() {
        assertEquals(1, ClimbingStairs70.climbStairs(0 + 1)); // 1 —Å–ø–æ—Å–æ–± –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –ø–µ—Ä–≤–æ–π —Å—Ç—É–ø–µ–Ω–∏
    }

}
