package com.ivan.pronin.job.hunt.middle;

import java.util.LinkedHashMap;
import java.util.Map;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @author Ivan Pronin
 * @since 09.07.2025
 */
public class FirstUniqueCharInString387 {

    /*
     * 387. First Unique Character in a String
     * Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.
     * Example 1:
     * Input: s = "leetcode"
     * Output: 0
     * Example 2:
     * Input: s = "loveleetcode"
     * Output: 2
     * Example 3:
     * Input: s = "aabb"
     * Output: -1
     * üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * Time: O(n) ‚Äî –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–µ –¥–≤–∞–∂–¥—ã: –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤, –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ.
     * Space: O(1) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å–∏–º–≤–æ–ª–æ–≤ (26 –±—É–∫–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞).
     *
     */
    public static int firstUniqChar(String s) {
        int[] charCount = new int[26]; // –¥–ª—è –±—É–∫–≤ a-z

        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for (char c : s.toCharArray()) {
            charCount[c - 'a']++;
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
        for (int i = 0; i < s.length(); i++) {
            if (charCount[s.charAt(i) - 'a'] == 1) {
                return i;
            }
        }

        return -1; // –µ—Å–ª–∏ –Ω–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    }

    public static int firstUniqCharWithHashing(String s) {
        Map<Character, Integer> map = new LinkedHashMap<>();

        for (char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }

        for (int i = 0; i < s.length(); i++) {
            if (map.get(s.charAt(i)) == 1) {
                return i;
            }
        }

        return -1;
    }

    @Test
    void testExample1() {
        assertEquals(0, FirstUniqueCharInString387.firstUniqChar("leetcode"));
        assertEquals(0, FirstUniqueCharInString387.firstUniqCharWithHashing("leetcode"));
    }

    @Test
    void testExample2() {
        assertEquals(2, FirstUniqueCharInString387.firstUniqChar("loveleetcode"));
        assertEquals(2, FirstUniqueCharInString387.firstUniqCharWithHashing("loveleetcode"));
    }

    @Test
    void testExample3() {
        assertEquals(-1, FirstUniqueCharInString387.firstUniqChar("aabbcc"));
        assertEquals(-1, FirstUniqueCharInString387.firstUniqCharWithHashing("aabbcc"));
    }

    @Test
    void testSingleCharacter() {
        assertEquals(0, FirstUniqueCharInString387.firstUniqChar("z"));
        assertEquals(0, FirstUniqueCharInString387.firstUniqCharWithHashing("z"));
    }

    @Test
    void testEmptyString() {
        assertEquals(-1, FirstUniqueCharInString387.firstUniqChar(""));
        assertEquals(-1, FirstUniqueCharInString387.firstUniqCharWithHashing(""));
    }

    @Test
    void testUnicodeCharacters() {
        assertEquals(2, FirstUniqueCharInString387.firstUniqCharWithHashing("ÊàëÊàëÁà±‰Ω†‰Ω†"));
    }

}
