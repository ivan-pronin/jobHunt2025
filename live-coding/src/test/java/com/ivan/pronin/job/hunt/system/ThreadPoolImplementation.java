package com.ivan.pronin.job.hunt.system;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @author Ivan Pronin
 * @since 16.07.2025
 */
public class ThreadPoolImplementation {

    /*
     * üîí –ß—Ç–æ —Ç–∞–∫–æ–µ Thread Pool?
     * Thread Pool (–ø—É–ª –ø–æ—Ç–æ–∫–æ–≤) ‚Äî —ç—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
     * * * ‚úÖ –†–µ—à–µ–Ω–∏–µ 1: –ü—Ä–æ—Å—Ç–æ–π Thread Pool
     * üìå –ò–¥–µ—è:
     * Thread Pool –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
     * * * –ü—Ä–∏–º–µ—Ä: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
     * * * –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
     * - –ü–æ–≤—ã—à–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ —Å—á—ë—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
     * - –°–Ω–∏–∂–∞–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
     * * * * –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:
     * - –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –∑–∞–¥–∞—á
     */
    private static class SimpleThreadPool {

        private final ExecutorService executor;

        public SimpleThreadPool(int threadCount) {
            this.executor = Executors.newFixedThreadPool(threadCount);
        }

        public void submitTask(Runnable task) {
            executor.submit(task);
        }

        public void shutdown() {
            executor.shutdown();
        }

    }

    @Test
    void testSubmitTasks() throws InterruptedException {
        var pool = new SimpleThreadPool(3);
        AtomicInteger counter = new AtomicInteger(0);

        for (int i = 0; i < 5; i++) {
            pool.submitTask(() -> counter.incrementAndGet());
        }

        Thread.sleep(500); // wait for tasks
        pool.shutdown();

        assertEquals(5, counter.get());
    }

    /*
     * üß† –¶–µ–ª—å –∑–∞–¥–∞—á–∏
     * –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π Thread Pool —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é:
     * submit(task) ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
     * fetchTask() ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * stop() ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É–ª –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –ø–æ—Ç–æ–∫–∏
     * ‚úÖ –†–µ—à–µ–Ω–∏–µ 2: –ü—Ä–æ—Å—Ç–æ–π Thread Pool —Å —Ä—É—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
     * üìå –ò–¥–µ—è
     * –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤ —Å –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞—á.
     *
     */
    private static class ThreadPool2 {

        private final List<Worker> workers = new LinkedList<>();

        private final Queue<Runnable> taskQueue = new LinkedList<>();

        private boolean isStopped = false;

        public ThreadPool2(int numThreads) {
            for (int i = 0; i < numThreads; i++) {
                Worker worker = new Worker();
                worker.start();
                workers.add(worker);
            }
        }

        public synchronized void submit(Runnable task) {
            if (isStopped) throw new IllegalStateException("ThreadPool is stopped");
            taskQueue.offer(task);
            notify();
        }

        public synchronized Runnable fetchTask() throws InterruptedException {
            while (taskQueue.isEmpty()) {
                wait();
            }
            return taskQueue.poll();
        }

        public synchronized void stop() {
            isStopped = true;
            for (Worker w : workers) {
                w.interrupt();
            }
        }

        private class Worker extends Thread {

            public void run() {
                while (!isInterrupted()) {
                    Runnable task;
                    try {
                        task = fetchTask();
                    } catch (InterruptedException e) {
                        break;
                    }
                    try {
                        task.run();
                    } catch (Exception ignored) {
                    }
                }
            }

        }

    }

    @Test
    void testThreadPoolExecutesTasks() throws InterruptedException {
        ThreadPool2 pool = new ThreadPool2(2);
        AtomicInteger counter = new AtomicInteger(0);

        for (int i = 0; i < 4; i++) {
            pool.submit(counter::incrementAndGet);
        }

        Thread.sleep(500);
        pool.stop();

        assertEquals(4, counter.get());
    }

    private static  class ThreadPoolWithFuture {
        private final BlockingQueue<Runnable> taskQueue = new LinkedBlockingQueue<>();
        private final List<Thread> workers = new ArrayList<>();
        private volatile boolean isShutdown = false;

        public ThreadPoolWithFuture(int numThreads) {
            for (int i = 0; i < numThreads; i++) {
                Thread worker = new Thread(this::workerLoop);
                worker.start();
                workers.add(worker);
            }
        }

        public <T> Future<T> submit(Callable<T> task) {
            if (isShutdown) throw new RejectedExecutionException("Thread pool is shut down");
            FutureTask<T> futureTask = new FutureTask<>(task);
            taskQueue.offer(futureTask);
            return futureTask;
        }

        public void shutdown() {
            isShutdown = true;
            // Wake up any waiting workers
            for (Thread worker : workers) {
                worker.interrupt();
            }
        }

        public void awaitTermination() {
            for (Thread worker : workers) {
                try {
                    worker.join();
                } catch (InterruptedException ignored) {}
            }
        }

        private void workerLoop() {
            while (!isShutdown || !taskQueue.isEmpty()) {
                try {
                    Runnable task = taskQueue.poll(500, TimeUnit.MILLISECONDS);
                    if (task != null) task.run();
                } catch (InterruptedException e) {
                    // Allow loop to exit if shutdown and queue is empty
                }
            }
        }
    }

    @Test
    void testFutureSubmission() throws Exception {
        ThreadPoolWithFuture pool = new ThreadPoolWithFuture(2);

        Future<Integer> future = pool.submit(() -> 42);
        Future<String> another = pool.submit(() -> "Hello");

        assertEquals(42, future.get());
        assertEquals("Hello", another.get());

        Thread.sleep(1000);
        // Ensure the pool can handle multiple tasks
        for (int i = 0; i < 5; i++) {
            pool.submit(() -> {
                try {
                    System.out.println("Task running in thread: " + Thread.currentThread().getName() +   " at " + System.currentTimeMillis());
                    Thread.sleep(100);
                } catch (InterruptedException ignored) {}
                return null;
            });
        }

        pool.shutdown();
        pool.awaitTermination();
    }

    @Test
    void testGracefulShutdown() throws InterruptedException {
        ThreadPoolWithFuture pool = new ThreadPoolWithFuture(2);

        for (int i = 0; i < 5; i++) {
            pool.submit(() -> {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ignored) {}
                return null;
            });
        }

        pool.shutdown();
        pool.awaitTermination();

        assertTrue(true); // just ensuring no exception was thrown
    }
}
