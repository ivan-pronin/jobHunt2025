package com.ivan.pronin.job.hunt.easy;

import java.util.Arrays;
import java.util.BitSet;
import java.util.HashSet;
import java.util.Set;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/**
 * @author Ivan Pronin
 * @since 09.07.2025
 */
public class ContainsDuplicate217 {

    /*
     * Given an integer array nums, return true if any value appears at least twice
     * in the array, and return false if every element is distinct.
     */
    /*
     * üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * Time: O(n) ‚Äî –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –ø–æ –º–∞—Å—Å–∏–≤—É.
     * Space: O(n) ‚Äî –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã.
     */
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> seen = new HashSet<>();
        for (int num : nums) {
            if (!seen.add(num)) {
                return true; // –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å ‚Äî –¥—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω
            }
        }
        return false;
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:
    /* üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * Time: O(n log n) ‚Äî –∏–∑-–∑–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
     * Space: O(1) (–µ—Å–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ in-place, –∫–∞–∫ —É Arrays.sort –¥–ª—è int[]).
     */
    public boolean containsDuplicateAlt(int[] nums) {
        Arrays.sort(nums); // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                return true;
            }
        }
        return false;
    }

    public boolean containsDuplicateBitSet(int[] nums) {
        BitSet bitSet = new BitSet();

        for (int num : nums) {
            if (bitSet.get(num)) {
                return true; // —á–∏—Å–ª–æ —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å
            }
            bitSet.set(num); // –ø–æ–º–µ—Ç–∏—Ç—å —á–∏—Å–ª–æ –∫–∞–∫ –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω–æ–µ
        }

        return false;
    }


    @Test
    void testContainsDuplicate_WithDuplicates() {
        ContainsDuplicate217 solution = new ContainsDuplicate217();
        int[] nums = {1, 2, 3, 1};
        Assertions.assertTrue(solution.containsDuplicate(nums));
    }

    @Test
    void testContainsDuplicate_NoDuplicates() {
        ContainsDuplicate217 solution = new ContainsDuplicate217();
        int[] nums = {1, 2, 3, 4};
        Assertions.assertFalse(solution.containsDuplicate(nums));
    }

    @Test
    void testContainsDuplicate_EmptyArray() {
        ContainsDuplicate217 solution = new ContainsDuplicate217();
        int[] nums = {};
        Assertions.assertFalse(solution.containsDuplicate(nums));
    }

    @Test
    void testContainsDuplicate_SingleElement() {
        ContainsDuplicate217 solution = new ContainsDuplicate217();
        int[] nums = {42};
        Assertions.assertFalse(solution.containsDuplicate(nums));
    }

    @Test
    void testContainsDuplicate_AllDuplicates() {
        ContainsDuplicate217 solution = new ContainsDuplicate217();
        int[] nums = {7, 7, 7, 7};
        Assertions.assertTrue(solution.containsDuplicate(nums));
    }

}
