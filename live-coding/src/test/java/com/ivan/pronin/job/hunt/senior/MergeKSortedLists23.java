package com.ivan.pronin.job.hunt.senior;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;

import com.ivan.pronin.job.hunt.senior.model.ListNode;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

/**
 * @author Ivan Pronin
 * @since 10.07.2025
 */
public class MergeKSortedLists23 {

    /*
     * 23. Merge k Sorted Lists
     * You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
     * Merge all the linked-lists into one sorted linked-list and return it.
     * Example:
     * Input: lists = [[1,4,5],[1,3,4],[2,6]]
     * Output: [1,1,2,3,4,4,5,6]
     * üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * Time: O(N log k) ‚Äî –≥–¥–µ N ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–∞—Ö, k ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Å–∫–æ–≤.
     * Space: O(k) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—á—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∑–ª–æ–≤, –≥–¥–µ k ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Å–∫–æ–≤.
     */
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a.val));
        for (ListNode list : lists) {
            if (list != null) {
                minHeap.offer(list);
            }
        }

        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —É–∑–µ–ª –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        while (!minHeap.isEmpty()) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–∑–µ–ª —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            ListNode minNode = minHeap.poll();
            current.next = minNode; // –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É

            current = current.next; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
            if (minNode.next != null) {
                minHeap.offer(minNode.next); // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫—É—á—É
            }
        }
        return dummy.next; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –ø–æ—Å–ª–µ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ
    }

    /*
     * –†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π (Divide and Conquer)
     * üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * Time: O(N log k) ‚Äî –≥–¥–µ N ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–∞—Ö, k ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Å–∫–æ–≤.
     * Space: O(log k) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–∏, –≥–¥–µ k ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Å–∫–æ–≤.
     */
    public ListNode mergeKListsDaC(ListNode[] lists) {
        if (lists == null || lists.length == 0) return null;
        return mergeRange(lists, 0, lists.length - 1);
    }

    private ListNode mergeRange(ListNode[] lists, int left, int right) {
        if (left == right) return lists[left];

        int mid = left + (right - left) / 2;
        ListNode l1 = mergeRange(lists, left, mid);
        ListNode l2 = mergeRange(lists, mid + 1, right);

        return mergeTwoLists(l1, l2);
    }

    private ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0), tail = dummy;

        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                tail.next = l1;
                l1 = l1.next;
            } else {
                tail.next = l2;
                l2 = l2.next;
            }
            tail = tail.next;
        }

        tail.next = (l1 != null) ? l1 : l2;
        return dummy.next;
    }

    private ListNode buildList(int... vals) {
        ListNode dummy = new ListNode(0), curr = dummy;
        for (int val : vals) {
            curr.next = new ListNode(val);
            curr = curr.next;
        }
        return dummy.next;
    }

    private int[] toArray(ListNode head) {
        List<Integer> res = new ArrayList<>();
        while (head != null) {
            res.add(head.val);
            head = head.next;
        }
        return res.stream().mapToInt(i -> i).toArray();
    }

    @Test
    public void testHeapSolution() {
        ListNode[] lists = new ListNode[]{
            buildList(1, 4, 5),
            buildList(1, 3, 4),
            buildList(2, 6)
        };
        assertArrayEquals(new int[]{1, 1, 2, 3, 4, 4, 5, 6}, toArray(mergeKLists(lists)));
    }

    @Test
    public void testDivideAndConquerSolution() {
        ListNode[] lists = new ListNode[]{
            buildList(1, 4, 5),
            buildList(1, 3, 4),
            buildList(2, 6)
        };
        assertArrayEquals(new int[]{1, 1, 2, 3, 4, 4, 5, 6}, toArray(mergeKListsDaC(lists)));
    }

}
